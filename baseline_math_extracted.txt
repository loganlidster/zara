
What is a baseline?The baseline is yesterday’s “normal” ratio between BTC price and a given stock’s price (BTC ÷ Stock).Today we monitor that ratio minute-by-minute:If today’s ratio rises above baseline × (1 + buy%), it signals BUY.If it falls below baseline × (1 – sell%), it signals SELL.How we calculate the baseline matters a lot—different methods weight or filter yesterday’s data differently.The five baseline methods1. Equal MeanWhat: Simple arithmetic mean of all minute-by-minute BTC/Stock ratios from the previous day.How:baseline=1Ni=1NBTCiStockiPros: Simple, quick.Cons: Sensitive to outliers.2. MedianWhat: The middle value of yesterday’s BTC/Stock ratios.How: Sort all minute ratios, pick the middle.Pros: Robust to single-minute spikes or anomalies.Cons: Ignores magnitude/volume of trades.3. VWAP_RATIO (Volume Weighted Average Price ratio)What: Uses daily VWAP for BTC and for the stock, then divides them.How:VWAP=∑(Price×Volume)∑Volumebaseline=VWAPBTCVWAPStockPros: Accounts for where most trading happened.Cons: Relies on Polygon’s “volume” for BTC, which is sometimes print counts, not actual dollar turnover.4. VOL_WEIGHTEDWhat: Weighted average of minute ratios using stock’s share volume as weights.How:baseline=∑(ratioi×VolumeStock,i)∑VolumeStock,iPros: Reflects the price levels where most stock trading occurred.Cons: Still sensitive if BTC prints are noisy.5. WINSORIZEDWhat: Trims extreme outliers before averaging.How: Clip the distribution of ratios to between the 5th and 95th percentile, then take the mean.Pros: Reduces effect of sudden spikes/drops.Cons: Throws away tail info (sometimes signal is in the tail).How to add to trader_ui_v6Right now, trader_ui_v6 lets you configure buy%, sell%, and budget per symbol. To add these methods:Database schema:symbol_configs already has a method column (we added this earlier).Each symbol row can store "VWAP_RATIO", "WINSORIZED", etc.Worker (ratio_worker_sql_v6.py):Replace the single baseline calc with a dispatcher function (like we built in V7).Example:def compute_baseline(df, method):    if method == "EQUAL_MEAN":        return df["ratio"].mean()    elif method == "MEDIAN":        return df["ratio"].median()    elif method == "VWAP_RATIO":        # compute VWAP for BTC and stock        ...    elif method == "VOL_WEIGHTED":        ...    elif method == "WINSORIZED":        ...Before checking today’s ratios, load yesterday’s data for that symbol and compute baseline with the selected method.UI (trader_ui_v6.py):Add a method column to the editable per-symbol controls.Users pick method per symbol from a dropdown:st.data_editor(df, column_config={    "method": st.column_config.SelectboxColumn(        options=["EQUAL_MEAN","MEDIAN","VWAP_RATIO","VOL_WEIGHTED","WINSORIZED"]    )})That way, live trading will behave like the backtests: each stock can have its own method, buy%, sell%, and budget.